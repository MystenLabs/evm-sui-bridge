{
  "address": "0xa8a5674f2519b563c0ba56b7eA5eE56b406Ce34B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rollingTokenLimits",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "calculateWindowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "startHour",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endHour",
          "type": "uint32"
        }
      ],
      "name": "garbageCollectHourlyTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "hourlyTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestHourTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "rollingTokenLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateHourlyTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "updateRollingTokenLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "willAmountExceedLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda709c19715e3e7f4b0ac5ddc8b67676d757d9e3c3581543c0bf8b34c08d1b2a",
  "receipt": {
    "to": null,
    "from": "0xb18f79Fe671db47393315fFDB377Da4Ea1B7AF96",
    "contractAddress": "0xa8a5674f2519b563c0ba56b7eA5eE56b406Ce34B",
    "transactionIndex": 81,
    "gasUsed": "1225835",
    "logsBloom": "0x
    "blockHash": "0x7ee7288a15ec2f383f31eee12e1796baf47c7c937f87ced08467952c00633e3a",
    "transactionHash": "0xda709c19715e3e7f4b0ac5ddc8b67676d757d9e3c3581543c0bf8b34c08d1b2a",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 5075373,
        "transactionHash": "0xda709c19715e3e7f4b0ac5ddc8b67676d757d9e3c3581543c0bf8b34c08d1b2a",
        "address": "0xa8a5674f2519b563c0ba56b7eA5eE56b406Ce34B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b18f79fe671db47393315ffdb377da4ea1b7af96"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x7ee7288a15ec2f383f31eee12e1796baf47c7c937f87ced08467952c00633e3a"
      }
    ],
    "blockNumber": 5075373,
    "cumulativeGasUsed": "12045693",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      100000,
      100000,
      100000,
      10000000000
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "c9dc6dcd551afc4379a0f6b9d3fc8620",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rollingTokenLimits\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"calculateWindowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endHour\",\"type\":\"uint32\"}],\"name\":\"garbageCollectHourlyTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"hourlyTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestHourTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rollingTokenLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateHourlyTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"updateRollingTokenLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"willAmountExceedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeLimiter.sol\":\"BridgeLimiter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373035313036323735393731\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BridgeLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IBridgeLimiter.sol\\\";\\n\\n// TODO: make BridgeLimiter upgradeable\\ncontract BridgeLimiter is IBridgeLimiter, Ownable {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // token id => hour timestamp => total amount bridged (on a given hour)\\n    mapping(uint8 => mapping(uint32 => uint256)) public hourlyTransfers;\\n    // token id => maximum amount bridged within the rolling window\\n    mapping(uint8 => uint256) public rollingTokenLimits;\\n    uint32 public oldestHourTimestamp;\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    constructor(uint256[] memory _rollingTokenLimits) {\\n        for (uint8 i = 0; i < _rollingTokenLimits.length; i++) {\\n            rollingTokenLimits[i] = _rollingTokenLimits[i];\\n        }\\n        oldestHourTimestamp = uint32(block.timestamp / 1 hours);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function willAmountExceedLimit(uint8 tokenId, uint256 amount)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        uint256 totalTransferred = calculateWindowAmount(tokenId);\\n        return totalTransferred + amount > rollingTokenLimits[tokenId];\\n    }\\n\\n    function calculateWindowAmount(uint8 tokenId) public view returns (uint256 total) {\\n        uint32 currentHour = uint32(block.timestamp / 1 hours);\\n        // aggregate the last 24 hours\\n        for (uint32 i = 0; i < 24; i++) {\\n            total += hourlyTransfers[tokenId][currentHour - i];\\n        }\\n        return total;\\n    }\\n\\n    /* ========== EXTERNAL FUNCTIONS ========== */\\n\\n    function updateHourlyTransfers(uint8 tokenId, uint256 amount) external override {\\n        require(amount > 0, \\\"BridgeLimiter: amount must be greater than 0\\\");\\n        require(\\n            !willAmountExceedLimit(tokenId, amount),\\n            \\\"BridgeLimiter: amount exceeds rolling window limit\\\"\\n        );\\n\\n        uint32 currentHour = uint32(block.timestamp / 1 hours);\\n\\n        // garbage collect most recently expired hour if window is moving\\n        if (hourlyTransfers[tokenId][currentHour] == 0 && oldestHourTimestamp < currentHour - 24) {\\n            garbageCollectHourlyTransfers(tokenId, currentHour - 25, currentHour - 25);\\n        }\\n\\n        // update hourly transfers\\n        hourlyTransfers[tokenId][currentHour] += amount;\\n    }\\n\\n    function updateRollingTokenLimits(uint8 tokenId, uint256 newLimit) external onlyOwner {\\n        require(newLimit > 0, \\\"BridgeLimiter: newLimit must be greater than 0\\\");\\n        rollingTokenLimits[tokenId] = newLimit;\\n    }\\n\\n    function garbageCollectHourlyTransfers(uint8 tokenId, uint32 startHour, uint32 endHour)\\n        public\\n    {\\n        uint32 windowStart = uint32(block.timestamp / 1 hours) - 24;\\n        require(\\n            startHour >= oldestHourTimestamp, \\\"BridgeLimiter: hourTimestamp must be in the past\\\"\\n        );\\n        require(startHour < windowStart, \\\"BridgeLimiter: start must be before current window\\\");\\n        require(endHour < windowStart, \\\"BridgeLimiter: end must be before current window\\\");\\n\\n        for (uint32 i = startHour; i <= endHour; i++) {\\n            if (hourlyTransfers[tokenId][i] > 0) delete hourlyTransfers[tokenId][i];\\n        }\\n\\n        // update oldest hour if current oldest hour was garbage collected\\n        if (startHour == oldestHourTimestamp) {\\n            oldestHourTimestamp = endHour + 1;\\n        }\\n    }\\n\\n    // TODO: add upgrade functions\\n}\\n\",\"keccak256\":\"0x6aa9725fe4d66c41df90e7710b51a6e29852e857954dc2c0dd04697f9be652d7\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBridgeLimiter {\\n    function willAmountExceedLimit(uint8 tokenId, uint256 amount) external view returns (bool);\\n\\n    function updateHourlyTransfers(uint8 tokenId, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5359b763c0526b0c5ecfff6502304d7d2a7b2934454f7cce0e0c47dc61308ecf\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200176138038062001761833981810160405281019062000037919062000383565b620000576200004b620000f360201b60201c565b620000fb60201b60201c565b60005b81518160ff161015620000bb57818160ff168151811062000080576200007f620003d4565b5b6020026020010151600260008360ff1660ff168152602001908152602001600020819055508080620000b2906200043f565b9150506200005a565b50610e1042620000cc91906200049c565b600360006101000a81548163ffffffff021916908363ffffffff16021790555050620004d4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022382620001d8565b810181811067ffffffffffffffff82111715620002455762000244620001e9565b5b80604052505050565b60006200025a620001bf565b905062000268828262000218565b919050565b600067ffffffffffffffff8211156200028b576200028a620001e9565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002b681620002a1565b8114620002c257600080fd5b50565b600081519050620002d681620002ab565b92915050565b6000620002f3620002ed846200026d565b6200024e565b905080838252602082019050602084028301858111156200031957620003186200029c565b5b835b81811015620003465780620003318882620002c5565b8452602084019350506020810190506200031b565b5050509392505050565b600082601f830112620003685762000367620001d3565b5b81516200037a848260208601620002dc565b91505092915050565b6000602082840312156200039c576200039b620001c9565b5b600082015167ffffffffffffffff811115620003bd57620003bc620001ce565b5b620003cb8482850162000350565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b60006200044c8262000432565b915060ff820362000462576200046162000403565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620004a982620002a1565b9150620004b683620002a1565b925082620004c957620004c86200046d565b5b828204905092915050565b61127d80620004e46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806393543dff1161007157806393543dff1461015257806399b56f571461016e5780639eec52181461019e578063c6b478dd146101bc578063d596afcc146101ec578063f2fde38b14610208576100a9565b806304a05c13146100ae5780630d3269ea146100de578063715018a6146100fa57806385b55eac146101045780638da5cb5b14610134575b600080fd5b6100c860048036038101906100c3919061099c565b610224565b6040516100d591906109e2565b60405180910390f35b6100f860048036038101906100f39190610a29565b61023c565b005b6101026102a9565b005b61011e60048036038101906101199190610a29565b6102bd565b60405161012b9190610a84565b60405180910390f35b61013c6102fb565b6040516101499190610ae0565b60405180910390f35b61016c60048036038101906101679190610a29565b610324565b005b61018860048036038101906101839190610b37565b6104ad565b60405161019591906109e2565b60405180910390f35b6101a66104d2565b6040516101b39190610b86565b60405180910390f35b6101d660048036038101906101d1919061099c565b6104e8565b6040516101e391906109e2565b60405180910390f35b61020660048036038101906102019190610ba1565b610576565b005b610222600480360381019061021d9190610c20565b610791565b005b60026020528060005260406000206000915090505481565b610244610814565b60008111610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610cd0565b60405180910390fd5b80600260008460ff1660ff168152602001908152602001600020819055505050565b6102b1610814565b6102bb6000610892565b565b6000806102c9846104e8565b9050600260008560ff1660ff1681526020019081526020016000205483826102f19190610d1f565b1191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008111610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e90610de7565b60405180910390fd5b61037182826102bd565b156103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890610e79565b60405180910390fd5b6000610e10426103c19190610ec8565b90506000600160008560ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000205414801561043257506018816104119190610ef9565b63ffffffff16600360009054906101000a900463ffffffff1663ffffffff16105b1561045b5761045a836019836104489190610ef9565b6019846104559190610ef9565b610576565b5b81600160008560ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060008282546104a19190610d1f565b92505081905550505050565b6001602052816000526040600020602052806000526040600020600091509150505481565b600360009054906101000a900463ffffffff1681565b600080610e10426104f99190610ec8565b905060005b60188163ffffffff16101561056f57600160008560ff1660ff168152602001908152602001600020600082846105349190610ef9565b63ffffffff1663ffffffff168152602001908152602001600020548361055a9190610d1f565b9250808061056790610f2d565b9150506104fe565b5050919050565b60006018610e10426105889190610ec8565b6105929190610ef9565b9050600360009054906101000a900463ffffffff1663ffffffff168363ffffffff1610156105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610fcb565b60405180910390fd5b8063ffffffff168363ffffffff1610610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a9061105d565b60405180910390fd5b8063ffffffff168263ffffffff1610610691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610688906110ef565b60405180910390fd5b60008390505b8263ffffffff168163ffffffff1611610737576000600160008760ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002054111561072457600160008660ff1660ff16815260200190815260200160002060008263ffffffff1663ffffffff168152602001908152602001600020600090555b808061072f90610f2d565b915050610697565b50600360009054906101000a900463ffffffff1663ffffffff168363ffffffff160361078b5760018261076a919061110f565b600360006101000a81548163ffffffff021916908363ffffffff1602179055505b50505050565b610799610814565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff906111bb565b60405180910390fd5b61081181610892565b50565b61081c610956565b73ffffffffffffffffffffffffffffffffffffffff1661083a6102fb565b73ffffffffffffffffffffffffffffffffffffffff1614610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790611227565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600060ff82169050919050565b61097981610963565b811461098457600080fd5b50565b60008135905061099681610970565b92915050565b6000602082840312156109b2576109b161095e565b5b60006109c084828501610987565b91505092915050565b6000819050919050565b6109dc816109c9565b82525050565b60006020820190506109f760008301846109d3565b92915050565b610a06816109c9565b8114610a1157600080fd5b50565b600081359050610a23816109fd565b92915050565b60008060408385031215610a4057610a3f61095e565b5b6000610a4e85828601610987565b9250506020610a5f85828601610a14565b9150509250929050565b60008115159050919050565b610a7e81610a69565b82525050565b6000602082019050610a996000830184610a75565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aca82610a9f565b9050919050565b610ada81610abf565b82525050565b6000602082019050610af56000830184610ad1565b92915050565b600063ffffffff82169050919050565b610b1481610afb565b8114610b1f57600080fd5b50565b600081359050610b3181610b0b565b92915050565b60008060408385031215610b4e57610b4d61095e565b5b6000610b5c85828601610987565b9250506020610b6d85828601610b22565b9150509250929050565b610b8081610afb565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b600080600060608486031215610bba57610bb961095e565b5b6000610bc886828701610987565b9350506020610bd986828701610b22565b9250506040610bea86828701610b22565b9150509250925092565b610bfd81610abf565b8114610c0857600080fd5b50565b600081359050610c1a81610bf4565b92915050565b600060208284031215610c3657610c3561095e565b5b6000610c4484828501610c0b565b91505092915050565b600082825260208201905092915050565b7f4272696467654c696d697465723a206e65774c696d6974206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b6000610cba602e83610c4d565b9150610cc582610c5e565b604082019050919050565b60006020820190508181036000830152610ce981610cad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2a826109c9565b9150610d35836109c9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6a57610d69610cf0565b5b828201905092915050565b7f4272696467654c696d697465723a20616d6f756e74206d75737420626520677260008201527f6561746572207468616e20300000000000000000000000000000000000000000602082015250565b6000610dd1602c83610c4d565b9150610ddc82610d75565b604082019050919050565b60006020820190508181036000830152610e0081610dc4565b9050919050565b7f4272696467654c696d697465723a20616d6f756e74206578636565647320726f60008201527f6c6c696e672077696e646f77206c696d69740000000000000000000000000000602082015250565b6000610e63603283610c4d565b9150610e6e82610e07565b604082019050919050565b60006020820190508181036000830152610e9281610e56565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed3826109c9565b9150610ede836109c9565b925082610eee57610eed610e99565b5b828204905092915050565b6000610f0482610afb565b9150610f0f83610afb565b925082821015610f2257610f21610cf0565b5b828203905092915050565b6000610f3882610afb565b915063ffffffff8203610f4e57610f4d610cf0565b5b600182019050919050565b7f4272696467654c696d697465723a20686f757254696d657374616d70206d757360008201527f7420626520696e20746865207061737400000000000000000000000000000000602082015250565b6000610fb5603083610c4d565b9150610fc082610f59565b604082019050919050565b60006020820190508181036000830152610fe481610fa8565b9050919050565b7f4272696467654c696d697465723a207374617274206d7573742062652062656660008201527f6f72652063757272656e742077696e646f770000000000000000000000000000602082015250565b6000611047603283610c4d565b915061105282610feb565b604082019050919050565b600060208201905081810360008301526110768161103a565b9050919050565b7f4272696467654c696d697465723a20656e64206d757374206265206265666f7260008201527f652063757272656e742077696e646f7700000000000000000000000000000000602082015250565b60006110d9603083610c4d565b91506110e48261107d565b604082019050919050565b60006020820190508181036000830152611108816110cc565b9050919050565b600061111a82610afb565b915061112583610afb565b92508263ffffffff0382111561113e5761113d610cf0565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111a5602683610c4d565b91506111b082611149565b604082019050919050565b600060208201905081810360008301526111d481611198565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611211602083610c4d565b915061121c826111db565b602082019050919050565b6000602082019050818103600083015261124081611204565b905091905056fea2646970667358221220b6b53d9260ca9643ea2bc2b03e1b363463d0d444eb6e5d9403321e0b82b25bd864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806393543dff1161007157806393543dff1461015257806399b56f571461016e5780639eec52181461019e578063c6b478dd146101bc578063d596afcc146101ec578063f2fde38b14610208576100a9565b806304a05c13146100ae5780630d3269ea146100de578063715018a6146100fa57806385b55eac146101045780638da5cb5b14610134575b600080fd5b6100c860048036038101906100c3919061099c565b610224565b6040516100d591906109e2565b60405180910390f35b6100f860048036038101906100f39190610a29565b61023c565b005b6101026102a9565b005b61011e60048036038101906101199190610a29565b6102bd565b60405161012b9190610a84565b60405180910390f35b61013c6102fb565b6040516101499190610ae0565b60405180910390f35b61016c60048036038101906101679190610a29565b610324565b005b61018860048036038101906101839190610b37565b6104ad565b60405161019591906109e2565b60405180910390f35b6101a66104d2565b6040516101b39190610b86565b60405180910390f35b6101d660048036038101906101d1919061099c565b6104e8565b6040516101e391906109e2565b60405180910390f35b61020660048036038101906102019190610ba1565b610576565b005b610222600480360381019061021d9190610c20565b610791565b005b60026020528060005260406000206000915090505481565b610244610814565b60008111610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027e90610cd0565b60405180910390fd5b80600260008460ff1660ff168152602001908152602001600020819055505050565b6102b1610814565b6102bb6000610892565b565b6000806102c9846104e8565b9050600260008560ff1660ff1681526020019081526020016000205483826102f19190610d1f565b1191505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008111610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e90610de7565b60405180910390fd5b61037182826102bd565b156103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a890610e79565b60405180910390fd5b6000610e10426103c19190610ec8565b90506000600160008560ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000205414801561043257506018816104119190610ef9565b63ffffffff16600360009054906101000a900463ffffffff1663ffffffff16105b1561045b5761045a836019836104489190610ef9565b6019846104559190610ef9565b610576565b5b81600160008560ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060008282546104a19190610d1f565b92505081905550505050565b6001602052816000526040600020602052806000526040600020600091509150505481565b600360009054906101000a900463ffffffff1681565b600080610e10426104f99190610ec8565b905060005b60188163ffffffff16101561056f57600160008560ff1660ff168152602001908152602001600020600082846105349190610ef9565b63ffffffff1663ffffffff168152602001908152602001600020548361055a9190610d1f565b9250808061056790610f2d565b9150506104fe565b5050919050565b60006018610e10426105889190610ec8565b6105929190610ef9565b9050600360009054906101000a900463ffffffff1663ffffffff168363ffffffff1610156105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610fcb565b60405180910390fd5b8063ffffffff168363ffffffff1610610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a9061105d565b60405180910390fd5b8063ffffffff168263ffffffff1610610691576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610688906110ef565b60405180910390fd5b60008390505b8263ffffffff168163ffffffff1611610737576000600160008760ff1660ff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002054111561072457600160008660ff1660ff16815260200190815260200160002060008263ffffffff1663ffffffff168152602001908152602001600020600090555b808061072f90610f2d565b915050610697565b50600360009054906101000a900463ffffffff1663ffffffff168363ffffffff160361078b5760018261076a919061110f565b600360006101000a81548163ffffffff021916908363ffffffff1602179055505b50505050565b610799610814565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff906111bb565b60405180910390fd5b61081181610892565b50565b61081c610956565b73ffffffffffffffffffffffffffffffffffffffff1661083a6102fb565b73ffffffffffffffffffffffffffffffffffffffff1614610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088790611227565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600060ff82169050919050565b61097981610963565b811461098457600080fd5b50565b60008135905061099681610970565b92915050565b6000602082840312156109b2576109b161095e565b5b60006109c084828501610987565b91505092915050565b6000819050919050565b6109dc816109c9565b82525050565b60006020820190506109f760008301846109d3565b92915050565b610a06816109c9565b8114610a1157600080fd5b50565b600081359050610a23816109fd565b92915050565b60008060408385031215610a4057610a3f61095e565b5b6000610a4e85828601610987565b9250506020610a5f85828601610a14565b9150509250929050565b60008115159050919050565b610a7e81610a69565b82525050565b6000602082019050610a996000830184610a75565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aca82610a9f565b9050919050565b610ada81610abf565b82525050565b6000602082019050610af56000830184610ad1565b92915050565b600063ffffffff82169050919050565b610b1481610afb565b8114610b1f57600080fd5b50565b600081359050610b3181610b0b565b92915050565b60008060408385031215610b4e57610b4d61095e565b5b6000610b5c85828601610987565b9250506020610b6d85828601610b22565b9150509250929050565b610b8081610afb565b82525050565b6000602082019050610b9b6000830184610b77565b92915050565b600080600060608486031215610bba57610bb961095e565b5b6000610bc886828701610987565b9350506020610bd986828701610b22565b9250506040610bea86828701610b22565b9150509250925092565b610bfd81610abf565b8114610c0857600080fd5b50565b600081359050610c1a81610bf4565b92915050565b600060208284031215610c3657610c3561095e565b5b6000610c4484828501610c0b565b91505092915050565b600082825260208201905092915050565b7f4272696467654c696d697465723a206e65774c696d6974206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b6000610cba602e83610c4d565b9150610cc582610c5e565b604082019050919050565b60006020820190508181036000830152610ce981610cad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2a826109c9565b9150610d35836109c9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6a57610d69610cf0565b5b828201905092915050565b7f4272696467654c696d697465723a20616d6f756e74206d75737420626520677260008201527f6561746572207468616e20300000000000000000000000000000000000000000602082015250565b6000610dd1602c83610c4d565b9150610ddc82610d75565b604082019050919050565b60006020820190508181036000830152610e0081610dc4565b9050919050565b7f4272696467654c696d697465723a20616d6f756e74206578636565647320726f60008201527f6c6c696e672077696e646f77206c696d69740000000000000000000000000000602082015250565b6000610e63603283610c4d565b9150610e6e82610e07565b604082019050919050565b60006020820190508181036000830152610e9281610e56565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed3826109c9565b9150610ede836109c9565b925082610eee57610eed610e99565b5b828204905092915050565b6000610f0482610afb565b9150610f0f83610afb565b925082821015610f2257610f21610cf0565b5b828203905092915050565b6000610f3882610afb565b915063ffffffff8203610f4e57610f4d610cf0565b5b600182019050919050565b7f4272696467654c696d697465723a20686f757254696d657374616d70206d757360008201527f7420626520696e20746865207061737400000000000000000000000000000000602082015250565b6000610fb5603083610c4d565b9150610fc082610f59565b604082019050919050565b60006020820190508181036000830152610fe481610fa8565b9050919050565b7f4272696467654c696d697465723a207374617274206d7573742062652062656660008201527f6f72652063757272656e742077696e646f770000000000000000000000000000602082015250565b6000611047603283610c4d565b915061105282610feb565b604082019050919050565b600060208201905081810360008301526110768161103a565b9050919050565b7f4272696467654c696d697465723a20656e64206d757374206265206265666f7260008201527f652063757272656e742077696e646f7700000000000000000000000000000000602082015250565b60006110d9603083610c4d565b91506110e48261107d565b604082019050919050565b60006020820190508181036000830152611108816110cc565b9050919050565b600061111a82610afb565b915061112583610afb565b92508263ffffffff0382111561113e5761113d610cf0565b5b828201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111a5602683610c4d565b91506111b082611149565b604082019050919050565b600060208201905081810360008301526111d481611198565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611211602083610c4d565b915061121c826111db565b602082019050919050565b6000602082019050818103600083015261124081611204565b905091905056fea2646970667358221220b6b53d9260ca9643ea2bc2b03e1b363463d0d444eb6e5d9403321e0b82b25bd864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3497,
        "contract": "contracts/BridgeLimiter.sol:BridgeLimiter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 451,
        "contract": "contracts/BridgeLimiter.sol:BridgeLimiter",
        "label": "hourlyTransfers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 455,
        "contract": "contracts/BridgeLimiter.sol:BridgeLimiter",
        "label": "rollingTokenLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 457,
        "contract": "contracts/BridgeLimiter.sol:BridgeLimiter",
        "label": "oldestHourTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}